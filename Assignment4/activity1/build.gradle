apply plugin: 'application'

repositories {
    mavenCentral()
}

dependencies {
   implementation group: 'org.json', name: 'json', version: '20200518'
}

//define main class
mainClassName = 'Concentration'

task runTask1(type: JavaExec) {
  group 'server'
  description 'Creates Server socket waits for messages'

  classpath = sourceSets.main.runtimeClasspath
  main = 'taskone.Server'
  standardInput = System.in

  // Run with arguments e.g.: gradle runServer -Pport=9099 -q --console=plain
  if (project.hasProperty('port')) {
    args(project.getProperty('port'))
  } else {
    args('8000')  // Default port if none provided
  }
}

// Task to run the multi-threaded server (ThreadedServer)
task runTask2(type: JavaExec) {
    group = 'server'
    description = 'Runs the multi-threaded server for Task 2'

    classpath = sourceSets.main.runtimeClasspath
    main = 'taskone.ThreadedServer'
    standardInput = System.in

    // Run with arguments e.g.: gradle runTask2 -Pport=9099 -q --console=plain
    if (project.hasProperty('port')) {
      args(project.getProperty('port'))
    } else {
      args('8000')  // Default port if none provided
    }
}

// Task to run the thread-pool server (ThreadPoolServer)
task runTask3(type: JavaExec) {
    group = 'server'
    description = 'Runs the thread-pool server for Task 3'

    classpath = sourceSets.main.runtimeClasspath
    main = 'taskone.ThreadPoolServer'
    standardInput = System.in

    // Run with arguments e.g.: gradle runTask3 -Pport=9099 -Pthreads=4 -q --console=plain
    if (project.hasProperty('port') && project.hasProperty('threads')) {
        args(project.getProperty('port'), project.getProperty('threads'))
    } else if (project.hasProperty('port')) {
        args(project.getProperty('port'), '4')  // Default to 4 threads if not provided
    } else {
        args('8000', '4')  // Default port and 4 threads if none provided
    }
}

task runClient(type: JavaExec) {
  group 'client'
  description 'Creates client socket sends a message to the server'

  classpath = sourceSets.main.runtimeClasspath
  standardInput = System.in

  main = 'taskone.Client'
  standardInput = System.in

  // Run with arguments e.g.: gradle runClient -Phost=localhost -Pport=9099 -q --console=plain
  if (project.hasProperty("host") && project.hasProperty('port')) {
    args(project.getProperty('host'), project.getProperty('port'))
  } else {
    args('localhost', '8000')  // Default host and port if none provided
  }
}

